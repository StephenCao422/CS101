import time
start = time.time()


f = open("ms3-dna-mammuthus.txt", "r")
file = f.read()
file_s = file.split("\n")
dna_list = []
for x in file_s:
    dna_list.append(x)


def overlap(str_1,str_2, min_lengh):
    start = 0
    while True:
        start = str_1.find(str_2[:min_lengh], start)
        if start == -1:
            return 0
        if str_2.startswith(str_1[start:]):
            return len(str_1)-start
        start += 1

import itertools
def assemble_genome(dna_list):
    shortest_ss = None
    for perm_str in itertools.permutations(dna_list):
        ss = perm_str[0]
        for i in range(len(dna_list)-1):
            overlap_len = overlap(perm_str[i],perm_str[i+1],1)
            ss += perm_str[i+1][overlap_len:]
        if shortest_ss is None or len(ss) < len(shortest_ss):
            shortest_ss = ss
    return shortest_ss

print(assemble_genome(dna_list))

#print(assemble_genome(['AAGGTCACTACGTCCATTTTCTTCGTACCTCGGGTCAAGACGCTTGTTGATAATATCACCGAGATTTTTGGTGGACACTTATGGAGTTCCAACTGACTTTTTAGACCCGTACGAGGGCACAATCGACACCCATCGGTGCTGGCGGATCAGAGGTTGCATTCAAAAATAGTAGTCTGGAAACCACATTCAATCAGGACTGTCGCTAAGTAACATACTTCAATGTTTAAGTGTTAGGGAATCCCATCCTTTACATGTATCGATCTCCGTCTGTTCCTTTAGACAAGCGTCTAAGACACAAGAATACAGCACCTAAATCAACTTGAGAGGATGTCGATCAAAAGATGGCGGCACCAAATGGTATGTCCTTCAACAGTCCAATTGCGCTCAGTACATCCACGATCTGTCGAACCACCAACTCTTGGAACCCGCCTTCCGTTTTCTGCCTTATAGCAAGCTAACTGCTCACCTACGCCAGGACTCGCTTTGTACCTGCATCCCGTGACCACATCTAGTTCCACAGCCGACGCGCTAAACTTCACAAACTAAGACCGCATCCGGGACCTATGCCAGCGCAGCCGTACAGCGCGGGCACCTGAGTCGCCAACATTTCGTTGTCAGCATAGGCCTTCACTGCCATATTGGGGGTAAACCACTGCAGTG','CTGCAGTGGTTCACGACTTCACTTTGTGAGCGGAGCCCCATCGAAGCGAAGGACGGGATTACCCGGATATGGAACCATCCGGCGTCGGATGCCTTCCGCATATGGCGCTAATGGCAAAGGAGGGCAGTAATTAACGTTCGAATCTGTGCATCATACCTGGTCCAGCTAGCTACGTCGCTAAGAACCACGAACCTACCAGGGCCATATGAATGCTAGGATTATGGGAGCATTCCCAAGTTTTCAATCATCGACAACCATGCACTACTTTAATGGACGGCGTGTCGGGTGGTAAACGCTGGAATCAGGATCGAATGGCGTGCGGCGTGCACCCCGCGCAACAGTATTACCCTTTATCCAGATATTGTAGACCATCGTGGTACAAACCGCGACTTCAAGTTCTCAACCGAAGTGTTCGTAACACTTACGAGACTAGGCACGATGCTATACCCTGGAGAGATAATGGATTTTGGCTGTGCCCCAACATCACGATCTTAGACCGTTTAGCCTTTAGTTAACAACTAACGCTTCAAACGTGGTCTATAATGAGAGCGCTCCATTCGTTGTCACAATGAAGGACAAGTGTCACTAACTCTACATCGAGTCCCGAAATAC','TCACATTCCATTAAAGCTACTAATCGTTTAATCGTTGTTCCATCCGCCTAGCTCCGGAGGGGGAATGAAAGAATGCTCTTTCTATAAGCCGTCTATTGACGTTCTAAAAAACTCGCTTAGCTTACGAGGCAATTTTGCAAAGCCCCCGACATATGATGACCCTCGTTTATAACATTACATCCATGCTGGGGTTCCACGAATAGCCCGCGTTTGAACGCACATGTAGGACTAGCAACGAGGATGGATTGCTCAAAAGCGGGATCTACCGCAACATTCGACGAGCAGCCTCTGGAATTGGTGGCCATACGGACCTTTCGCTCTATGATGCCATTAGGGCCTGGGTTAAAACGGGACCCCTGGCACGACGTACTTGGTAGGCACTGTGACTCATTGATGACTCCAGACTTTCTGCGATAGGTGAGCATGGCTGGACATAGGCCATCCGTCAGTTGCGGATAAGAAGTTTCGACAAGTCTGTCGCGGGGGCACCAATGTCAGAATCGGTGGAACGTCTGTTTGGTGCTCATACGTGAGCTAGCAGTCGCAACATTAAAACTCTCAAGGCTAGGCTCGCGTTGTCGGGGTCCAACACAACATCGCTTCTCCAATGCCGCCGCGCTCCCTGGTCCATACCTATTCAATACGAGTGCATTTGAGATAG','TGATCAGCGAGTGGACCGGCGGTGGTGAACTTCGAAAATCACTCAGACTCTACTATGCTCTTATACTTAGTCAACTGATATTTTTGCTGATTCGAGAAGCAGCCGTTTGCTTGTGAGGTGGGCTATCAAACAGACGCGAGGCAACGCGTGGGGTCCGGCTGGGGACACGCCTTCTAGCATACTCAGGCGTAGTCACTGGGGGTCAGAATCGATTATGGGTAGGATGTGATGGGATACCTGACCCGTAACAACGACGAGCTTCTGTACCAGCCCCTGCTCGTTCACGAGGTTTCGGAGCGAAGCTGGAGAACTGTACTAAGGCTGGAAAATGCCTTCTTGTAACTTTACTTAAAGACTATGAACACATGTTAATTTAGCTATCCAGCAATCGCATTCAGCGCAAAACTTACATAGAGGTTAAGGTGATGGGAAGCTCGGGTTTCGTTTTGTTTCCATTGCCCCCCCGTCATATGAGAATGCGTGCTGTATTCAGGCGCACCCGGTAATCTGGACTGCCCGCTTGTCCCATATCGAGGCCCCGCTCGTTTCAAAGTCTACGTTCATGGATAATCCGGACTAGCGCCAAATAGAAGAAAGAGTTAGCAGCATTCCTTCGTTTTGATCGGAGGTTCACATTC','TAGTCTTCTTCGATCTCCCTTCCATGTATGTTACCGTTTACGCCGGCGGATACAAGCGTAGAGACGCAA','TGAGATAGGAATCGCACAAGGCGGTGAGACGAATAAGCTTAGTTCTCTTTTCTAGGGGTGTACAACTTATCCTGGCTGCTGGGGCTCGATGAATCGATGCTGCTCGCGTATAACCATACAACCCAACTTTATCTGGTCCCGACGGGATGCAGGTTGAATACCGAGTTATTACTGGCGAGATTTCTCGTGGGTCAGTGCCGGCTGGATCTATATAAGCGTCCAACTCTCGTCTTTTGGGAAACCACGAGCACAGCTTGAGAGAATTCGGGACGTGAAGCAACAACTATCCTTCTCCAGCATAGCGTCTATGTCCCTTACTCTTAAGCAGGATATTCAGAGAATTTTTGATAACGCTATGTATTGGAAACTATGCACACTAAGTGGTTTATCTACTATGAAGCATGGTGGGGAGCGCCCGGCTAGATACCTAACGTGTCAGAGTCTATCTACCGGGCAAATCTCTATGCACTGTCAGATCGACTTTTGCCGTCGTACCTCACGAATAAGGGAGTACCACTAGCCCAGTTTTACATCTAGCACCCCTGATAATTGCTAGAATATCAGGCGCGACTGTTATCAACACCCTTTAATGTAACTGCGGGTCCCAGCTGTTTACCAAACCGTAGCATTTC','AGCATTTCTACCAAGGTCACGCAATCACGCACATTCCCTGATTGCAAGGATTGACGAACGACAATCACTATCACCCACGAAACAGGGCATCGTAGCCGAAATAGAGCTCCGGCAGTCTTGTAACAGTCACACGTCGAACTACATCGTAAGTCCCAAGGCATTTTAGACTTCGCCAGCAGAAGGTTGTCTGATAGGCTCCAGGTTCGTGGCCGATGGTGGCGATCACGATGAGTCGCTAATTCAGGCCTACGCACTCCGCTAGAGTAACTACGGCTACGAGGCCACAGAGACAGGCGGTTTGTAATCTATTACGACGCAGATCGATGGGTTAGAATGGCTTCGCGCAGACCACGTTACGCAATCTCCCTCGCGCTCGATATAGGGAAGGTGAAGTAATCATCGCTTACGGATTCACCGGGCCTCCGCGCTCAAGTAGCTCGCTGATACGTGAGGCAGGCTTTTCTAATGCGTTTCTCTGGGCGTCTGCATGTTACATCTGCCCGCGGGTCTAAATGTTCCAACAGGCACCCCGGAAGTCAGTATGGTACGGGGTCTTGCCTGTG','TGCCTGTGGAACTGGAGGCTTCGGAAGACAAAGCTTGAAGAAGTGTCTACTGCGCAGCCGTAGACGTTATGAATATCCGATCGCGCTTCCCAAACTTTTCCAGGGGACATAATGTAGTTCCCCACCCTGCAGCGGGCTTTTAACACCGGTGAGCGCACTCCATGATGTGGTAGCGTGTTACTCTTGCAGGGTAGTGAGCCTAGTTCCTTCAAGTGAACCCAATGACTTTCACTGTGACTTCATAGAGCCCCGTCTCCAGTATGACGCGTAGGATCGTGAACCCCACGAAGCCCACGCTGGATCATGAGCGCGAAGCATGAAGGGCATGCCGGTACTTGTCGACGTCACGGTCGGACTGGCTTTTCAGCTCGCGCGGGCCCCCACATACTTTACCCCCACGCGACGACGGTGGGACTCGCCGGAAACTCCCGAGATAAGGAAAGATTGCTATCCACCCGCGACAGAAGACCGTAAGCGGCGGCCTTGTGCGGTCTTAAGGAGCGGAGGTAGCGAGGGCTCAGTCGTGCTTATACGCATGTGTTAGTCGGAGCATGCAAGCAGCACATTGACACGCGGCGCCGGCCGCAGGTAGTCGAAAAAAACGTAAGGGCGTTCTAGGATTGTAAATTCTGAGGGGCTAGTGTGTCTTCTACCCAAAGGTCAC']))
end = time.time()
print("The time of execution of above program is :",(end-start), "s")

# if S1 == S2:
# do nothing, continue to next string

# S1 + S2:
# i: S1: 0; j: S2:len(S1)-1 (if len(S2) > len(S1))
# i: S1: len(S1) - len(S2); j: S2:len(S2)-1 (if len(S2) <= len(S1))
# tempString 1

# S2 + S1:
# i: S2: 0; j: S1: len(S2)-1 (if len(S2) <= len(S1))
# i: S1:len(S1)-1; j: S2:len(S2) - len(S1) (if len(S2) > len(S1))
# tempString 2

# stringToKeep: tempString1 if len(tempString1) < len(tempString2) else tempString2
